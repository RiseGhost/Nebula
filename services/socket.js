/*const webSocket = require('ws')
const BigNumber = require('bignumber.js')
const fs = require('fs')

const socket_port = 8086
const ws = new webSocket.Server({ port: socket_port })

const i = new BigNumber(502013)
const p = new BigNumber(25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357)
const SecretNumeber = new BigNumber(parseInt(Math.random()*3) + 5)

let number = i.pow(SecretNumeber)
number = number.mod(p)

ws.on('connection', (ws) => {
  ws.onmessage = (request) => {
    console.log("Mensagem recebida")
    const data = request.data
    var number = new BigNumber(data)
    number = number.pow(SecretNumeber)
    number = number.mod(p)
    console.log("Private key -> " + number.toString(16).substring(0,64))
    ws.close()
  }
  ws.send(number.toString())
})

console.log('Socket srever ON âœ… prot -> ' + socket_port)*/

const { default: BigNumber } = require("bignumber.js");

const randonNumber = new BigNumber(Math.random()*20)+10
const i = new BigNumber(502013)
const p = new BigNumber(25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357)
const public_key = i.pow(randonNumber).mod(p)
const json_public_key = JSON.stringify({client_number: public_key})
fetch('key',{
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: json_public_key
}).then(PublicKey => PublicKey.json()).then(pk => {
  const public_key_server = new BigNumber(pk.number)
  const private_key = public_key_server.pow(randonNumber).mod(p).toString(16).substring(0,64)
  console.log("private key -> " + private_key)
})